{
	"fav_albums": [],
	"fav_songs": [],
	"choosen_folders": [
		"C:\\Users\\ASUS\\Music\\group .mp3\\New folder",
		"C:\\Users\\ASUS\\Downloads\\fre"

	],
	"playlists": {
		"soft": {
			"songs": [
				"a 99",
				"b ii",
				"song 99",
				"song ii",
				"song",
				"song1"
			],
			"date_created": 11111,
			"date_mod": 1722511904368
		},
		"bille": {
			"songs": [
				"song 99",
				"song ii",
				"song",
				"song1"
			],
			"date_created": 11111,
			"date_mod": 2111
		}
	},
	"win-size": [
		1382,
		744
	],
	"win-pos": [
		0,
		0
	],
	"win_size_b4_max": [
		null,
		null
	],
	"win_pos_b4_max": [
		null,
		null
	],
	"initialized": true
}


import React from "react"
import "./../css/mini_tabs.css"
import SongBuild from "./SongBuild"
import FolderBtn from "./folderBtn"
import { nanoid } from "nanoid"
// console.log(SongBuild)

function MyMiniHeader(){
    return (
        <div className="build1 bud1head bud1headjs" id="withoutfolder">
            <div className="song-cover-th"></div>
            <div className="song-title-th">TITLE</div>
            <div className="song-artist-th">ARTIST</div>
            <div className="song-album-th">ALBUM</div>
            <div className="song-length-th">LENGTH</div>
            <div className="header-build1-btn-case">
                <button  className="sort-btn" onClick={function(){coverScreen.classList.remove('display-none')}} style={{height: "30px",position: 'relative',top: '2px',padding:'0'}}>
                    <svg xmlns="http://www.w3.org/2000/svg" version="1.1" x="0px" y="0px" viewBox="0 0 100 125" style={{width: '100%',height: '100%',fill: 'white'}}>
                        <path d="M30,37.5H10c-1.4,0-2.5,1.1-2.5,2.5v20c0,1.4,1.1,2.5,2.5,2.5h20c1.4,0,2.5-1.1,2.5-2.5V40C32.5,38.6,31.4,37.5,30,37.5z   M27.5,57.5h-15v-15h15V57.5z"/>
                        <path d="M90,7.5H70c-1.4,0-2.5,1.1-2.5,2.5v50c0,1.4,1.1,2.5,2.5,2.5h20c1.4,0,2.5-1.1,2.5-2.5V10C92.5,8.6,91.4,7.5,90,7.5z   M87.5,57.5h-15v-45h15V57.5z"/>
                        <path d="M30,67.5H10c-1.4,0-2.5,1.1-2.5,2.5v20c0,1.4,1.1,2.5,2.5,2.5h20c1.4,0,2.5-1.1,2.5-2.5V70C32.5,68.6,31.4,67.5,30,67.5z   M27.5,87.5h-15v-15h15V87.5z"/>
                        <path d="M60,37.5H40c-1.4,0-2.5,1.1-2.5,2.5v50c0,1.4,1.1,2.5,2.5,2.5h20c1.4,0,2.5-1.1,2.5-2.5V40C62.5,38.6,61.4,37.5,60,37.5z   M57.5,87.5h-15v-45h15V87.5z"/>
                        <path d="M90,67.5H70c-1.4,0-2.5,1.1-2.5,2.5v20c0,1.4,1.1,2.5,2.5,2.5h20c1.4,0,2.5-1.1,2.5-2.5V70C92.5,68.6,91.4,67.5,90,67.5z   M87.5,87.5h-15v-15h15V87.5z"/>
                        <path d="M60,7.5H10c-1.4,0-2.5,1.1-2.5,2.5v20c0,1.4,1.1,2.5,2.5,2.5h50c1.4,0,2.5-1.1,2.5-2.5V10C62.5,8.6,61.4,7.5,60,7.5z   M57.5,27.5h-45v-15h45V27.5z"/>
                    </svg>
                </button>
            </div>
        </div>
    )
}
async function createPages(get_all_song=false){
    try{
        let test_stopwatch=new Date()
        let gottenFFTags=await bridge.getAll(get_all_song)
        let end=new Date()
        console.log((end.getTime()-test_stopwatch.getTime())/1000+' seconds',(end.getTime()-test_stopwatch.getTime()) + ' millisecs')
        console.log(gottenFFTags)
        return gottenFFTags
    }
    catch{
        console.log('err')
    }
}

function Choosenfolders_MiniTab({data}){
    let [songs,setSongs] = React.useState([])
    React.useEffect(function(){
        function renderBatch(start,index){
            console.log(start,index)
            const list = DATA_PARSED.slice(start,index).map(([file_path,file_tags],i)=><SongBuild key={nanoid()} fav={file_tags.fav} title={file_tags.title} size={file_tags.size} dur={file_tags.dur} file_path={file_path} album={file_tags.album} album_artist={file_tags.album_artist} pic={file_tags.picture}/> )
            setSongs(old=>[...old,...list])
            if(TOTAL_COMPONENTS-index>0){
                const no = Math.trunc(TOTAL_COMPONENTS/15)+index > TOTAL_COMPONENTS ? index+(TOTAL_COMPONENTS-index) :index + Math.trunc(TOTAL_COMPONENTS/6)
                setTimeout(()=>renderBatch(index,no),1)
            }else{
                setTimeout(()=>{
                    setSongs(o=>[<SongBuild key='dead' fav={true} title='ant' file_path='ant' album='god' size={1} dur={64} album_artist='fabian' pic={undefined}/> ,...o])
                },1000)
            }
        }
        let DATA_PARSED=data
        const TOTAL_COMPONENTS=DATA_PARSED.length
        Object.keys(data).length&&renderBatch(0,10)        
        
    },[data])
    return (
        <div id='tracks-tab' className="mini-tab">
            <MyMiniHeader/>    
            <div className="songs">
                    {songs}
            </div>
        </div>
    )
}
function Allfolders_MiniTab({data}){
    // let [data__,setData]=React.useState(data)
    let [folders,setFolders]=React.useState([])
    React.useEffect(function(){
        function renderBatch(start,index){
            // console.log(index-start,'batc')
            const list = DATA_PARSED.slice(start,index)
                                .map(([folder_path,folder_tags],i)=>{
                                    return <FolderBtn key={nanoid()} name_={folder_path} len={folder_tags.len} date_cre={folder_tags.folderDate_created} date_mod={folder_tags.folderDate_mod} size={folder_tags.folderSize} dur={folder_tags.folderDuration} />
                                })
            setFolders(old=>[...old,...list])
            if(TOTAL_COMPONENTS-index>0){
                const no = Math.trunc(TOTAL_COMPONENTS/15)+index > TOTAL_COMPONENTS ? index+(TOTAL_COMPONENTS-index) :index + Math.trunc(TOTAL_COMPONENTS/6)
                setTimeout(()=>renderBatch(index,no),1)
            }else{
                setTimeout(()=>{
                    setFolders(o=>[<FolderBtn key={nanoid()} name_={'fabian/science'} len={20} date_cre={113435283} date_mod={113435270} size={666} dur={125} />,...o])
                    return 

                    //  console.log(songs)
                    // setSongs((i)=>{
                    //     console.log(i)
                    //     return i
                    // })
                },1000)
            }
        }
        let DATA_PARSED=data
        
        const TOTAL_COMPONENTS=DATA_PARSED.length
        // console.log(TOTAL_COMPONENTS)
        // renderBatch(0,TOTAL_COMPONENTS)        
        Object.keys(data).length&&renderBatch(0,10)   
    },[data])
    return (
        <div id="FOLDERS" className="sticky mini-tab">
            <div className="folder-header">
                <div className="tapped-folder">
                    <p></p>
                </div>
                <div className="header-build1-btn-case">
                    <button className="sort-btn" onClick={()=>coverScreen.style.display='flex'}>
                        <svg xmlns="http://www.w3.org/2000/svg" version="1.1" x="0px" y="0px" viewBox="0 0 100 125">
                            <path d="M30,37.5H10c-1.4,0-2.5,1.1-2.5,2.5v20c0,1.4,1.1,2.5,2.5,2.5h20c1.4,0,2.5-1.1,2.5-2.5V40C32.5,38.6,31.4,37.5,30,37.5z   M27.5,57.5h-15v-15h15V57.5z"></path>
                            <path d="M90,7.5H70c-1.4,0-2.5,1.1-2.5,2.5v50c0,1.4,1.1,2.5,2.5,2.5h20c1.4,0,2.5-1.1,2.5-2.5V10C92.5,8.6,91.4,7.5,90,7.5z   M87.5,57.5h-15v-45h15V57.5z"></path>
                            <path d="M30,67.5H10c-1.4,0-2.5,1.1-2.5,2.5v20c0,1.4,1.1,2.5,2.5,2.5h20c1.4,0,2.5-1.1,2.5-2.5V70C32.5,68.6,31.4,67.5,30,67.5z   M27.5,87.5h-15v-15h15V87.5z"></path>
                            <path d="M60,37.5H40c-1.4,0-2.5,1.1-2.5,2.5v50c0,1.4,1.1,2.5,2.5,2.5h20c1.4,0,2.5-1.1,2.5-2.5V40C62.5,38.6,61.4,37.5,60,37.5z   M57.5,87.5h-15v-45h15V87.5z"></path>
                            <path d="M90,67.5H70c-1.4,0-2.5,1.1-2.5,2.5v20c0,1.4,1.1,2.5,2.5,2.5h20c1.4,0,2.5-1.1,2.5-2.5V70C92.5,68.6,91.4,67.5,90,67.5z   M87.5,87.5h-15v-15h15V87.5z"></path>
                            <path d="M60,7.5H10c-1.4,0-2.5,1.1-2.5,2.5v20c0,1.4,1.1,2.5,2.5,2.5h50c1.4,0,2.5-1.1,2.5-2.5V10C62.5,8.6,61.4,7.5,60,7.5z   M57.5,27.5h-45v-15h45V27.5z"></path>
                        </svg>
                    </button>
                </div>
            </div>
            <div id="grid-view" className="folders-case">
                {folders}
            </div>
        </div>
    )
}
const Allartist_MiniTab=React.memo(function({data}){
    return(
        <div id="ARTISTS" className="sticky mini-tab">
            <div className="folder-header">
                <div className="tapped-folder">
                    <p></p>
                </div>
                <div className="header-build1-btn-case">
                    <button className="sort-btn" onClick={()=>coverScreen.style.display='flex'}>
                        <svg xmlns="http://www.w3.org/2000/svg" version="1.1" x="0px" y="0px" viewBox="0 0 100 125">
                            <path d="M30,37.5H10c-1.4,0-2.5,1.1-2.5,2.5v20c0,1.4,1.1,2.5,2.5,2.5h20c1.4,0,2.5-1.1,2.5-2.5V40C32.5,38.6,31.4,37.5,30,37.5z   M27.5,57.5h-15v-15h15V57.5z"></path>
                            <path d="M90,7.5H70c-1.4,0-2.5,1.1-2.5,2.5v50c0,1.4,1.1,2.5,2.5,2.5h20c1.4,0,2.5-1.1,2.5-2.5V10C92.5,8.6,91.4,7.5,90,7.5z   M87.5,57.5h-15v-45h15V57.5z"></path>
                            <path d="M30,67.5H10c-1.4,0-2.5,1.1-2.5,2.5v20c0,1.4,1.1,2.5,2.5,2.5h20c1.4,0,2.5-1.1,2.5-2.5V70C32.5,68.6,31.4,67.5,30,67.5z   M27.5,87.5h-15v-15h15V87.5z"></path>
                            <path d="M60,37.5H40c-1.4,0-2.5,1.1-2.5,2.5v50c0,1.4,1.1,2.5,2.5,2.5h20c1.4,0,2.5-1.1,2.5-2.5V40C62.5,38.6,61.4,37.5,60,37.5z   M57.5,87.5h-15v-45h15V87.5z"></path>
                            <path d="M90,67.5H70c-1.4,0-2.5,1.1-2.5,2.5v20c0,1.4,1.1,2.5,2.5,2.5h20c1.4,0,2.5-1.1,2.5-2.5V70C92.5,68.6,91.4,67.5,90,67.5z   M87.5,87.5h-15v-15h15V87.5z"></path>
                            <path d="M60,7.5H10c-1.4,0-2.5,1.1-2.5,2.5v20c0,1.4,1.1,2.5,2.5,2.5h50c1.4,0,2.5-1.1,2.5-2.5V10C62.5,8.6,61.4,7.5,60,7.5z   M57.5,27.5h-45v-15h45V27.5z"></path>
                        </svg>
                    </button>
                </div>
            </div>
            <div id="grid-view" className="folders-case">
                {/* {folders} */}
            </div>
        </div>
    )
})
// function Allsongs_MiniTab({data}){
const Allsongs_MiniTab=React.memo(function({data}){
    let [songs,setSongs] = React.useState([])
    console.log(data)
    console.log('all songs minintab ren')
    React.useEffect(function(){
        function renderBatch(start,index){
            // console.log(index-start,'batc')
            const list = DATA_PARSED.slice(start,index).map(([file_path,file_tags],i)=><SongBuild key={nanoid()} fav={file_tags.fav} title={file_tags.title} size={file_tags.size} dur={file_tags.dur} file_path={file_path} album={file_tags.album} album_artist={file_tags.album_artist} pic={file_tags.picture}/> )
            setSongs(old=>[...old,...list])
            if(TOTAL_COMPONENTS-index>0){ //cause Boolean(-1) returns true :)
                const no = Math.trunc(TOTAL_COMPONENTS/15)+index > TOTAL_COMPONENTS ? index+(TOTAL_COMPONENTS-index) :index + Math.trunc(TOTAL_COMPONENTS/6)
                setTimeout(()=>renderBatch(index,no),1)
            }else{
                setTimeout(()=>{
                    setSongs(o=>[<SongBuild key='dead' fav={true} title='ant' file_path='ant' album='god' size={1} dur={64} album_artist='fabian' pic={undefined}/> ,...o])
                    //  console.log(songs)
                    // setSongs((i)=>{
                    //     console.log(i)
                    //     return i
                    // })
                },1000)
            }
        }
        let DATA_PARSED=data
        
        const TOTAL_COMPONENTS=DATA_PARSED.length
        // console.log(TOTAL_COMPONENTS)
        // renderBatch(0,TOTAL_COMPONENTS)        
        Object.keys(data).length&&renderBatch(0,10)        
        
    },[])
    
    return (
        <div id='all-songs-tab' className="mini-tab">
            <MyMiniHeader/>
            
                <div className="songs">
                    {songs}
                </div>
            
            
            <div className="scan-cover display-none">
                <div className="scanning-device-box">
                    <p className="dialog">Scanning your device for Audio Files this may take a while.</p>
                    <p className="file-name"></p>
                    <p className="file-name fno">Found 0 Audio Files.</p>
                    <div className="hint-box">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 101 101" id="info"><path d="M50.5 84.6c18.8 0 34.1-15.3 34.1-34.1S69.3 16.4 50.5 16.4 16.4 31.7 16.4 50.5s15.3 34.1 34.1 34.1zm0-63.4c16.1 0 29.3 13.1 29.3 29.3S66.6 79.8 50.5 79.8 21.2 66.6 21.2 50.5s13.2-29.3 29.3-29.3z"></path><path d="M44.8 65.5c-1.3 0-2.4 1.1-2.4 2.4 0 1.3 1.1 2.4 2.4 2.4h15.8c1.3 0 2.4-1.1 2.4-2.4 0-1.3-1.1-2.4-2.4-2.4h-5.5V44.3c0-1.3-1.1-2.4-2.4-2.4h-7.9c-1.3 0-2.4 1.1-2.4 2.4s1.1 2.4 2.4 2.4h5.5v18.8h-5.5z"></path><circle cx="49.4" cy="34" r="3.9"></circle></svg>
                        <p>You Could add a particular folder From settings.</p>
                    </div>
                    <div className="loader1"></div>
                </div>
            </div>
            </div>
    )
})
export default function MiniTab_Manager({screen,all_songs_data_n_folders,Choosenfolders_data_n_folders}){
    console.log({screen,all_songs_data_n_folders,Choosenfolders_data_n_folders})
    console.log('mini manager ren')
    let [current_mini_tab,setCurrentMinitab]=React.useState(screen)
    let [data_for_allSongs_Tab,setAllSongs]=React.useState(all_songs_data_n_folders[0])
    let [data_for_allFolders_Tab,setAllFolders]=React.useState(all_songs_data_n_folders[1]||Choosenfolders_data_n_folders[1])
    let [data_for_choosenFolders_Tab,setAllChoosenFolders]=React.useState(Choosenfolders_data_n_folders[0])

    console.log(data_for_choosenFolders_Tab)
    console.log(data_for_allSongs_Tab)
    console.log(current_mini_tab)
    // async function check_if_saved_folders(){
        
    // }
    React.useEffect(function(){
        
        //     createPages('get_all').then(res=>{//get_all
        //         if(!res){
        //             return
        //             // send app nofitication "No folder choosen"
        //         }
        //         let ALL_SONGS_LIST=[]
        //         let ALL_FOLDERS_LIST=[]
        //         res.structure.forEach(function(each){
        //             const keys_=Object.keys(each)
        //             const values_=Object.values(each)
        //             const {list_of_songs,list_of_tags}=values_[0]

        //             const folder_name=keys_[0]
        //             const folder_=[folder_name,{len:list_of_songs.length,folderDate_mod:values_[1],folderDate_created:values_[2],folderSize:values_[3],folderDuration:values_[4]}]
        //             // console.log(folder_name)
        //             ALL_FOLDERS_LIST.push(folder_)
        //             list_of_songs.map((each,i)=>{
        //                 ALL_SONGS_LIST.push([each,list_of_tags[i]])
        //             })
        //         })
        //         setAllSongs(ALL_SONGS_LIST)
        //         setAllFolders(ALL_FOLDERS_LIST)
        //     })
        // })  
              
        // setTimeout(()=>{
        //     setAllSongs(o=>[{...o,boy:{album:'boy',album_artist:"met's girl",title:"then dies"}},true])
        // },1000*40)

        
    },[])
    
    function styleMiniTab_Btns(event){
        const target =event.target
        if(!target) return
        document.querySelector('.tab-active')?.classList.remove('tab-active')
        const tab_name=target.dataset.forClick
        target.classList.add('tab-active')  
        setCurrentMinitab(tab_name)
    }
    return (
            <div className="mini-tabs">
                <div className="tab-btns-box" onClick={styleMiniTab_Btns}>
                    <button className={current_mini_tab==='choosen_folders'?'tab-active':''} data-for-click='choosen_folders' title="Tracks" id="">Tracks</button>
                    <button className={current_mini_tab==='all_folders'?'tab-active':''} data-for-click='all_folders' title="View Folders" id="">Folders</button>
                    <button className={current_mini_tab==='all_artists'?'tab-active':''} data-for-click='all_artists' title="Artist" id="">Artists</button>
                    <button className={current_mini_tab==='all_songs'?'tab-active':''} data-for-click='all_songs' title="Show All" id="tab-active">All Songs</button>
                </div>                
                <div className="mini-tabs--box">
                    
                    {current_mini_tab === 'choosen_folders' && <Choosenfolders_MiniTab data={data_for_choosenFolders_Tab}/>}
                    {current_mini_tab === 'all_folders' && <Allfolders_MiniTab data={data_for_allFolders_Tab}/>}
                    {current_mini_tab === 'all_artists' && <Allartist_MiniTab/>}
                    {current_mini_tab === 'all_songs' && <Allsongs_MiniTab data={data_for_allSongs_Tab}/>}
                    
                </div>
            </div>

    )
}